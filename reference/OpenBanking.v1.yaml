openapi: 3.0.0
info:
  title: OpenBanking
  version: '0.3'
  description: |-
    OpenBanking

    This the a draft of the Digis stateless API. This API is meant to be deployed on premise and not exposed to the web.

    Bank Test servers 

    * Credit Suisse: https://iso20022test.credit-suisse.com/user/settings/ebics
    * ZKB: https://testplattform.zkb.ch/user/settings/ebics
    * Raiffeisen: https://isotestbank.raiffeisen.ch/corporates/user/settings/ebics
  contact:
    name: Johan Boissard
    url: digis.ch
    email: johan@digis.ch
servers:
  - url: 'https:/tobedeployedonpremise.com'
paths:
  /statements:
    post:
      tags:
        - endpoint
      operationId: post-statements
      responses:
        '200':
          description: OK
      description: fetches the list of transactions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client:
                  $ref: '#/components/schemas/options'
                startDate:
                  type: string
                endDate:
                  type: string
              required:
                - client
                - startDate
                - endDate
        description: ''
  /payment/xml:
    post:
      tags:
        - endpoint
      operationId: payment-xml
      responses:
        '200':
          description: OK
      description: executes payment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  $ref: '#/components/schemas/options'
                xml:
                  type: string
              required:
                - options
                - xml
    parameters: []
  /payment:
    post:
      tags:
        - endpoint
      summary: ''
      operationId: post-payment
      responses:
        '200':
          description: OK
      description: executes payment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  $ref: '#/components/schemas/options'
                payment:
                  $ref: '#/components/schemas/payment'
              required:
                - options
                - payment
  /init:
    post:
      summary: Initialize
      operationId: post-init
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                required:
                  - key
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  $ref: '#/components/schemas/options'
              required:
                - options
        description: 'First request to bank,  Note that the `key` argument is empty at this stage'
      description: Initialize connection
      tags:
        - endpoint
  /init/bank:
    post:
      tags:
        - endpoint
      summary: Initialize bank
      operationId: post-init-bank
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                  hash:
                    type: object
                    required:
                      - X002
                      - E002
                    description: EBICS bank key (hashes)
                    properties:
                      X002:
                        type: string
                        description: |-
                          Hash value X002 encryption
                          e.g. 62 2D 5F D1 16 C9 90 F8 99 80 15 5C DB 93 23 47 70 86 EA 80
                      E002:
                        type: string
                        description: |-
                          Hash value E002 encryption
                          e.g. 62 2D 5F D1 16 C9 90 F8 99 80 15 5C DB 93 23 47 70 86 EA 80
                required:
                  - hash
      description: Fetches bank keys. (After letter has been sent and account freed). The key returned at this stage overrides the previous one.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  $ref: '#/components/schemas/options'
        description: ''
  /letter:
    post:
      tags:
        - endpoint
      operationId: post-letter
      responses:
        '200':
          description: HTML of the letter to send to the bank
      description: 'if successful, returns the letter to send to the bank.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  $ref: '#/components/schemas/options'
                bankName:
                  type: string
              required:
                - options
                - bankName
        description: regular `options` object with the key returned in the previous endpoint
components:
  schemas:
    options:
      title: options
      type: object
      properties:
        key:
          type: string
        partnerId:
          type: string
        userId:
          type: string
        username:
          type: string
        clientId:
          type: string
        hostId:
          type: string
        url:
          type: string
        passphrase:
          type: string
      required:
        - key
        - partnerId
        - userId
        - username
        - clientId
        - hostId
        - url
        - passphrase
      description: security parameters that need to be passed with every requests to be identified and authorized
    payment:
      title: payment
      type: object
      properties:
        debitor:
          $ref: '#/components/schemas/debitor'
        creditor:
          type: array
          items:
            $ref: '#/components/schemas/creditor'
      required:
        - debitor
        - creditor
    debitor:
      title: debitor
      type: object
      properties:
        name:
          type: string
        iban:
          type: string
        bic:
          type: string
        '':
          type: string
    creditor:
      title: creditor
      type: object
      properties:
        amount:
          type: number
        name:
          type: string
        iban:
          type: string
        bic:
          type: string
        referenceNumber:
          type: string
      required:
        - amount
        - name
        - iban
        - bic
tags:
  - name: endpoint
